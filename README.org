#+title: Solutions for SICP Exercises

* Chapter 1
** [[skim:///Users/dsdshcym/Dropbox/Docs/sicp.pdf::54][Exercise 1.1]]
   1. Question 1
      #+BEGIN_SRC scheme
        10
      #+END_SRC

      #+RESULTS:
      : 10

   2. Question 2
      #+BEGIN_SRC scheme
        (+ 5 3 4)
      #+END_SRC

      #+RESULTS:
      : 12

   3. Question 3
      #+BEGIN_SRC scheme
        (- 9 1)
      #+END_SRC

      #+RESULTS:
      : 8

   4. Question 4
      #+BEGIN_SRC scheme
        (/ 6 2)
      #+END_SRC

      #+RESULTS:
      : 3

   5. Question 5
      #+BEGIN_SRC scheme
        (+ (* 2 4) (- 4 6))
      #+END_SRC

      #+RESULTS:
      : 6

   6. Question 6
      #+BEGIN_SRC scheme :session
        (define a 3)
        (define b (+ a 1))
      #+END_SRC

      #+RESULTS:

   7. Question 7
      #+BEGIN_SRC scheme :session
        (+ a b (* a b))
      #+END_SRC

      #+RESULTS:
      : 19

   8. Question 8
      #+BEGIN_SRC scheme :session
        (= a b)
      #+END_SRC

   9. Question 9
      #+BEGIN_SRC scheme :session
        (if (and (> b a) (< b (* a b)))
            b
            a)
      #+END_SRC

      #+RESULTS:
      : 4

   10. Question 10
       #+BEGIN_SRC scheme :session
         (cond ((= a 4) 6)
               ((= b 4) (+ 6 7 a))
               (else 25))
       #+END_SRC

       #+RESULTS:
       : 16

   11. Question 11
       #+BEGIN_SRC scheme :session
         (+ 2 (if (> b a) b a))
       #+END_SRC

       #+RESULTS:
       : 6

   12. Question 12
       #+BEGIN_SRC scheme :session
         (* (cond ((> a b) a)
                 ((< a b) b)
                 (else -1))
           (+ a 1))
       #+END_SRC

       #+RESULTS:
       : 16
** [[skim:///Users/dsdshcym/Dropbox/Docs/sicp.pdf::55][Exercise 1.2]]
   #+BEGIN_SRC scheme
     (/ (+ (+ 5 4)
           (- 2 (- 3 (+ 6 (/ 4 5)))))
        (* (* 3
              (- 6 2))
           (- 2 7)))
   #+END_SRC

   #+RESULTS:
   : -37/150
** [[skim:///Users/dsdshcym/Dropbox/Docs/sicp.pdf::55][Exercise 1.3]]
   #+BEGIN_SRC scheme
     (define (sum-of-two-larger-squares a b c)
       (define (square x)
         (* x x))

       (define (sum a b)
         (+ a b))

       (define (larger a b)
         (if (> a b)
             a
             b))

       (define (largest-of-three a b c)
         (larger a (larger b c)))

       (define (smaller a b)
         (if (< a b)
             a
             b))

       (define (smallest-of-three a b c)
         (smaller a (smaller b c)))

       (define (is-middle a b c)
         (or (and (<= c b) (<= b a))
             (and (<= a b) (<= b c))))

       (define (middle-of-three a b c)
         (cond ((is-middle b a c) a)
               ((is-middle a b c) b)
               ((is-middle a c b) c)))

       (sum (square (largest-of-three a b c))
            (square (middle-of-three a b c)))
       )

     (sum-of-two-larger-squares 1 2 3)
     (sum-of-two-larger-squares 4 2 3)
   #+END_SRC

   #+RESULTS:
   : 25

** [[skim:///Users/dsdshcym/Dropbox/Docs/sicp.pdf::55][Exercise 1.4]]
   Return $a - |b|$
** [[skim:///Users/dsdshcym/Dropbox/Docs/sicp.pdf::55][Exercise 1.5]]
   - Applicative-order Evaluation

     A infinite loop happens. Since process ~p~ will be expanded to itself
     infinitely.

   - Normal-order Evaluation

     0
** [[skim:///Users/dsdshcym/Dropbox/Docs/sicp.pdf::60][Exercise 1.6]]
   The behavior is as same as the original one. Due to the explaination of how
   ~cond~ works in [[skim:///Users/dsdshcym/Dropbox/Docs/sicp.pdf::51][this page]].
** [[skim:///Users/dsdshcym/Dropbox/Docs/sicp.pdf::61][Exercise 1.7]]
   - Square
     #+BEGIN_SRC scheme :session
       (define (square x)
         (* x x))
     #+END_SRC

     #+RESULTS:

   - Original
     #+BEGIN_SRC scheme :session
       (define (good-enough? guess x)
         (< (abs (- (square guess) x)) 0.001))
     #+END_SRC

     #+RESULTS:

   - Alternative
     #+BEGIN_SRC scheme :session
       (define (alternative-good-enough? guess previous-guess)
         (< (abs (- guess previous-guess)) (* guess 0.001)))
     #+END_SRC

     Yes, it works better both for small and large numbers.
** TODO Exercise 1.8
** Exercise 1.9
   - Recursive

     Grow and shrink

     #+BEGIN_SRC scheme
       (define (+ a b)
         (if (= a 0) b (inc (+ (dec a) b))))
     #+END_SRC

     (+ a b) = (inc (inc (inc ... (inc b)))

   - Iterative

     Do not grow and shrink

     #+BEGIN_SRC scheme
       (define (+ a b)
         (if (= a 0) b (+ (dec a) (inc b))))
     #+END_SRC

     (+ a b) = (+ 0 a+b)
** Exercise 1.10
   #+BEGIN_SRC scheme :session
     (define (A x y) (cond ((= y 0) 0)
                           ((= x 0) (* 2 y))
                           ((= y 1) 2)
                           (else (A (- x 1) (A x (- y 1))))))
   #+END_SRC

   #+RESULTS:

   - (A 1 10)
     #+BEGIN_SRC scheme :session :exports both
       (A 1 10)
     #+END_SRC

     #+RESULTS:
     : 1024

   - (A 2 4)
     #+BEGIN_SRC scheme :session :exports both
       (A 2 4)
     #+END_SRC

     #+RESULTS:
     : 65536

   - (A 3 3)
     #+BEGIN_SRC scheme :session :exports both
       (A 3 3)
     #+END_SRC

     #+RESULTS:
     : 65536

   - ~f~
     ~(f n)~ computes ~2 * n~.

   - ~g~
     ~(g n)~ computes ~2^n~

   - ~h~
     ~(h n)~ computes ~2^(h (- n 1))~
** Exercise 1.11
   - Recursive
     #+BEGIN_SRC scheme
       (define (f-recursive n)
         (if (< n 3) n
             (+
              (* 1 (f-recursive (- n 1)))
              (* 2 (f-recursive (- n 2)))
              (* 3 (f-recursive (- n 3)))
              )))
     #+END_SRC
   - Iterative
     #+BEGIN_SRC scheme
       (define (f-iterative n)
         (define (f-iterative-helper a b c count)
           (if (= n count) c
               (f-iterative-helper
                b
                c
                (+ c (* 2 b) (* 3 c))
                (+ count 1))
                ))
         (if (< n 3) n
             (f-iterative-helper 0 1 2 2))
         )
     #+END_SRC
** Exercise 1.12
   - Calc Level
     #+BEGIN_SRC scheme
       (define (get-next-level current)
         (cond ((null? current) '())
               ((= 1 (length current)) current)
               (else (cons (+ (car current) (cadr current))
                           (get-next-level (cdr current)))))
         )

       (define (pascals-triangle-level n)
         (if (= n 0)
             '()
             (cons 1
                   (get-next-level (pascals-triangle-level (- n 1))))
             )
         )

       (pascals-triangle-level 4)
     #+END_SRC

   - Calc element
     #+BEGIN_SRC scheme
       (define (pascals-triangle-element i j)
         (cond ((= i 1) 1)
               ((= j 1) 1)
               ((= i j) 1)
               (else (+ (pascals-triangle-element (- i 1) (- j 1))
                        (pascals-triangle-element (- i 1) j)))))
     #+END_SRC
** TODO Exercise 1.13
** TODO Exercise 1.14
** Exercise 1.15
   - 5   12.15 = 0.05 * 3^5
   - $O(\log{a})$
** Exercise 1.16
   #+BEGIN_SRC scheme
     (define (fast-expt-iter b n a)
       (define (square x)
         (* x x))
       (cond ((= n 0) a)
             ((even? n) (fast-expt-iter (square b) (/ n 2) a))
             (else (fast-expt-iter b (- n 1) (* a b)))))

     (fast-expt-iter 4 5 1)
   #+END_SRC
** Exercise 1.17
   #+BEGIN_SRC scheme :session
     (define (double a) (+ a a))

     (define (halve a) (/ a 2))

     (define (fast-mult a n)
       (cond ((= n 0) 0)
             ((even? n) (double (fast-mult a (halve n))))
             (else (+ a (fast-mult a (- n 1))))))

     (fast-mult 4 6)
   #+END_SRC

   #+RESULTS:
   : 24

** Exercise 1.18
   #+BEGIN_SRC scheme :session
     (define (fast-mult-iter a n product)
       (cond ((= n 0) product)
             ((even? n) (fast-mult-iter (double a) (halve n) product))
             (else (fast-mult-iter a (- n 1) (+ a product)))))

     (fast-mult-iter 4 6 0)
   #+END_SRC

   #+RESULTS:
   : 24
** Exercise 1.19
   - Prove
     - $a' = (b+a)q + ap$
     - $b' = bp + aq$
     - $\begin{align}a'' &= (b'+a')q + a'p \\
       &= (bp + aq + (b+a)q + ap)q + (b+a)qp + ap^2 \\
       &= bpq + aq^2 + (b+a)q^2 + apq + (b+a)qp + ap^2 \\
       &= (b+a)(2pq+q^2) + a(p^2+q^2) \end{align}$
     - $\begin{align}b'' &= b'p + a'q \\
       &= (bp + aq)p + ((b+a)q + ap)q \\
       &= b(p^2+q^2) + a(2pq + q^2) \end{align}$
     - $p' = (p^2+q^2)$
     - $q' = (q^2+2pq)$
   - Fib-iter
     #+BEGIN_SRC scheme
       (define (fib n)
         (fib-iter 1 0 0 1 n))
       (define (fib-iter a b p q count)
         (cond ((= count 0) b)
               ((even? count)
                (fib-iter a
                          b
                          (+ (* p p) (* q q)) ; compute p′
                          (+ (* q q) (* 2 p q)) ; compute q′
                          (/ count 2)))
               (else (fib-iter (+ (* b q) (* a q) (* a p))
                               (+ (* b p) (* a q))
                               p
                               q
                               (- count 1)))))
     #+END_SRC
** TODO Exercise 1.20
** Exercise 1.21
   #+BEGIN_SRC scheme :session
     (define (smallest-divisor n) (find-divisor n 2))

     (define (divides? a b) (= (remainder b a) 0))

     (define (square x) (* x x))

     (define (find-divisor n test-divisor)
       (cond ((> (square test-divisor) n) n)
             ((divides? test-divisor n) test-divisor)
             (else (find-divisor n (+ test-divisor 1)))))

     (display (smallest-divisor 199)) (newline)
     (display (smallest-divisor 1999)) (newline)
     (display (smallest-divisor 19999)) (newline)
   #+END_SRC

   #+RESULTS:

** Exercise 1.22
   #+BEGIN_SRC scheme :session
     (define (runtime) (tms:clock (times)))

     (define (prime? n)
       (equal? n (smallest-divisor n)))

     (define (timed-prime-test n)
       (newline)
       (display n)
       (start-prime-test n (runtime)))

     (define (start-prime-test n start-time)
       (let ((n-is-prime? (prime? n)))
           (if n-is-prime?
               (report-prime (- (runtime) start-time)))
           n-is-prime?))

     (define (report-prime elapsed-time)
       (display " *** ")
       (display elapsed-time))

     (define (first-n-prime-since-x n x count)
       (if (< count n)
           (if (timed-prime-test x)
               (first-n-prime-since-x n (+ 1 x) (+ 1 count))
               (first-n-prime-since-x n (+ 1 x) count))))

     (first-n-prime-since-x 3 1000 0)
     (first-n-prime-since-x 3 10000 0)
     (first-n-prime-since-x 3 100000 0)
     (first-n-prime-since-x 3 1000000 0)
     (first-n-prime-since-x 3 10000000 0)
   #+END_SRC

   #+RESULTS:
** Exercise 1.23
   #+BEGIN_SRC scheme
     (define (next test-divisor)
       (if (equal? test-divisor 3)
           2
           (+ test-divisor 1)))
   #+END_SRC
** TODO Exercise 1.24
** Exercise 1.25
   - No, she's not correct.
   - The result of ~(fast-expt base exp)~ may exceeds the boundry of the integer
     representation in our system.
*** [[https://wizardbook.wordpress.com/2010/11/29/exercise-1-25/][Exercise 1.25 – SICP exercises]]
** Exercise 1.26
   When ~(even? exp)~ this expmod will call ~(expmod base (/ exp 2) m)~ twice,
   hence the $\Theta(\log{n})$ complexity.
** TODO Exercise 1.27
** TODO Exercise 1.28
** TODO Exercise 1.29
** Exercise 1.30
   #+BEGIN_SRC scheme
     (define (sum term a next b)
       (define (iter a result)
         (if (> a b)
             result
             (iter (next a) (+ (term a)
                               result))))
       (iter a 0))

     ;; Test
     (define (pi-sum a b)
       (define (pi-term x)
         (/ 1.0 (* x (+ x 2))))
       (define (pi-next x)
         (+ x 4))
       (sum pi-term a pi-next b))

     (* 8 (pi-sum 1 1000))
     ;; => 3.139592655589782
   #+END_SRC
** Exercise 1.31
   - Recursive
     #+BEGIN_SRC scheme
       (define (product term a next n)
         (if (> a n)
             1
             (* (term a) (product term (next a) next n))))

       (define (factorial n)
         (define (identity x)
           x)
         (define (inc x)
           (+ x 1))
         (product identity 1 inc n))

       (define (pi-product a b)
         (define (pi-term x)
           (if (even? x)
               (/ (+ x 2) (+ x 1))
               (/ (+ x 1) (+ x 2))))
         (define (pi-next x)
           (+ x 1))
         (product pi-term a pi-next b))
     #+END_SRC
   - Iterative
     #+BEGIN_SRC scheme
       (define (iter-product term a next n)
         (define (iter a result)
           (if (> a n)
               result
               (iter (next a) (* result (term a)))))
         (iter a 1))
     #+END_SRC
** [[skim:///Users/dsdshcym/Dropbox/Docs/sicp.pdf::109][Exercise 1.32]]
   - Helper Functions
     #+BEGIN_SRC scheme :session 1-32
       (define (identify x)
         x)

       (define (inc x)
         (+ x 1))
     #+END_SRC

     #+RESULTS:
   - Recursive
     #+BEGIN_SRC scheme :session 1-32
       (define (accumulate combiner null-value term a next b)
         (if (> a b)
             null-value
             (combiner (term a)
                       (accumulate combiner null-value term (next a) next b))))
     #+END_SRC

     #+RESULTS:

   - Iterative
     #+BEGIN_SRC scheme :session 1-32
       (define (accumulate combiner null-value term a next b)
         (define (iter a result)
           (if (> a b)
               result
               (iter (next a) (combiner result (term a)))))
         (iter a null-value))
     #+END_SRC

     #+RESULTS:

   - Test Functions
     - Sum
       #+BEGIN_SRC scheme :session 1-32
         (define (sum a b)
           (accumulate + 0 identity a inc b))

         (sum 1 21)
       #+END_SRC

       #+RESULTS:
       : 231

     - Product
       #+BEGIN_SRC scheme :session 1-32
         (define (product a b)
           (accumulate * 1 identity a inc b))

         (product 1 6)
       #+END_SRC

       #+RESULTS:
       : 720
** [[skim:///Users/dsdshcym/Dropbox/Docs/sicp.pdf::110][Exercise 1.33]]
   - Helper Functions
     #+BEGIN_SRC scheme :session 1-33
       (define (identify x)
         x)

       (define (inc x)
         (+ x 1))

       (define (square x)
         (* x x))
     #+END_SRC
   - filtered-accumulate
     #+BEGIN_SRC scheme :session 1-33
       (define (filtered-accumulate filter combiner null-value term a next b)
         (if (> a b)
             null-value
             (combiner (if (filter (term a))
                           (term a)
                           null-value)
                       (filtered-accumulate filter combiner null-value term (next a) next b))))
     #+END_SRC
   - prime-square-sum
     #+BEGIN_SRC scheme :session 1-33
       (define (prime-square-sum a b)
         (filtered-accumulate prime? + 0 square a inc b))
     #+END_SRC
   - relative-prime-product
     #+BEGIN_SRC scheme :session 1-33
       (define (relative-prime-product n)
         (define (relative-prime-to-n? x)
           (= (gcd x n) 1))
         (filtered-accumulate relative-prime-to-n? * 1 identity 1 inc n))
     #+END_SRC
** [[skim:///Users/dsdshcym/Dropbox/Docs/sicp.pdf::116][Exercise 1.34]]
   1. (f f)
   2. (f 2)
   3. (2 2)
   4. Error
** [[skim:///Users/dsdshcym/Dropbox/Docs/sicp.pdf::122][Exercise 1.35]]
   - Fixed-point
     #+BEGIN_SRC scheme :session
       (define tolerance 0.00001)

       (define (fixed-point f first-guess)
         (define (close-enough? v1 v2)
           (< (abs (- v1 v2))
              tolerance))

         (define (try guess)
           (let ((next (f guess)))
             (if (close-enough? guess next)
                 next
                 (try next))))

         (try first-guess))
     #+END_SRC

     #+RESULTS:

   - The prove is trivial
   - Computation
     #+BEGIN_SRC scheme :session
       (define golden-ratio
         (fixed-point (lambda (x) (+ 1 (/ 1 x)))
                      1.0))
     #+END_SRC
** [[skim:///Users/dsdshcym/Dropbox/Docs/sicp.pdf::122][Exercise 1.36]]
   #+BEGIN_SRC scheme
     (define tolerance 0.00001)

     (define (fixed-point f first-guess)
       (define (close-enough? v1 v2)
         (< (abs (- v1 v2))
            tolerance))

       (define (try guess)
         (newline)
         (display guess)
         (let ((next (f guess)))
           (if (close-enough? guess next)
               next
               (try next))))

       (try first-guess))

     (fixed-point (lambda (x) (/ (log 1000) (log x)))
                  2.0)
   #+END_SRC

   #+RESULTS:
   : 4.555532270803653
** [[skim:///Users/dsdshcym/Dropbox/Docs/sicp.pdf::123][Exercise 1.37]]
   - Recursive
     #+BEGIN_SRC scheme :session
       (define (count-frac n d k)
         (define (recur i)
           (if (> i k)
               0
               (/ (n i) (+ (d i) (recur (+ i 1))))))
         (recur 1))

       (count-frac (lambda (i) 1.0)
                   (lambda (i) 1.0)
                   11)
     #+END_SRC

     #+RESULTS:
     : 0.6180555555555556

   - Iterative
     #+BEGIN_SRC scheme :session
       (define (count-frac n d k)
         (define (iter i result)
           (if (< i 1)
               result
               (iter (- i 1) (/ (n i) (+ (d i) result)))))
         (iter k 0))

       (define (frac k)
         (count-frac (lambda (i) 1.0)
                     (lambda (i) 1.0)
                     k))
       (frac 11)
     #+END_SRC

     #+RESULTS:
     : 0.6180555555555556
** [[skim:///Users/dsdshcym/Dropbox/Docs/sicp.pdf::124][Exercise 1.38]]
   #+BEGIN_SRC scheme :session
     (define (n i) 1.0)

     (define (k i)
       (if (= (modulo i 3) 2)
           (* 2 (/ (+ i 1) 3))
           1))

     (+ (count-frac n k 100) 2)
   #+END_SRC

   #+RESULTS:
   : 2.7182818284590455
** [[skim:///Users/dsdshcym/Dropbox/Docs/sicp.pdf::124][Exercise 1.39]]
   #+BEGIN_SRC scheme
     (define (tan-cf x k)
       (define (recur i)
         (if (> i k)
             0
             (/ (* x x) (- (- (* 2 i) 1.0) (recur (+ i 1))))))
       (/ (recur 1) x))

     (tan-cf 3.1415926 10)
   #+END_SRC

   #+RESULTS:
   : -5.548300656344823e-08
** [[skim:///Users/dsdshcym/Dropbox/Docs/sicp.pdf::131][Exercise 1.40]]
   #+BEGIN_SRC scheme
     (define (cubic a b c)
       (define (cubic-function x)
         (+ (* x x x)
            (* a x x)
            (* b x)
            c))
       cubic-function)
   #+END_SRC
** [[skim:///Users/dsdshcym/Dropbox/Docs/sicp.pdf::131][Exercise 1.41]]
   - 21
   - code
     #+BEGIN_SRC scheme
       (define (double p)
         (lambda (x) (p (p x))))

       (define (inc x)
         (+ x 1))

       (((double (double double)) inc) 5)
     #+END_SRC

     #+RESULTS:
     : 21
